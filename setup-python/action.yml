name: "Setup Python"
description: 'Set up a specific version of Python and add the command-line tools to the PATH.'
# Inputs match the upstream setup-python action
# Not all of them are necessarily supported for the M1 or ARM64 linux versions
inputs:
  python-version:
    description: "Version range or exact version of a Python version to use, using SemVer's version range syntax."
    required: true
    default: '3.x'
  cache:
    description: 'Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.'
    required: false
  architecture:
    description: 'The target architecture (x86, x64) of the Python interpreter.'
    required: false
  token:
    description: Used to pull python distributions from actions/python-versions. Since there's a default, this is typically not supplied by the user.
    required: false
    default: ${{ github.token }}
  cache-dependency-path:
    required: false
    description: 'Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies.'
  force-pyenv:
    required: false
    default: 'false'
    description: "Will force using pyenv instead of the upstream action if set to 'true'"
  allow-prerelease:
    required: false
    default: 'false'
    description: "Adjusts the passed in Python version to allow for pre-releases based on a simple major.minor request."
outputs:
  python-version:
    description: "The installed python version. Useful when given a version range as input."
  cache-hit:
    description: 'A boolean value to indicate a cache entry was found'
  python-version-string:
    description: "The python version string passed to upstream actions/setup-python"
    value: ${{ steps.select.outputs.version-string }}
runs:
  using: "composite"
  steps:
    - name: Inspect requested version
      shell: sh
      id: inspect
      env:
        REQUESTED_PYTHON_VERSION: ${{ inputs.python-version }}
      run: |
        set -vx
        if [ "$(echo "${REQUESTED_PYTHON_VERSION}" | sed 's/[^.]//g')" = "." ]
        then
          echo "patch-specified=false" | tee -a "${GITHUB_OUTPUT}"
        else
          echo "patch-specified=true" | tee -a "${GITHUB_OUTPUT}"
        fi

    - name: Disallow specifying a patch version when allowing pre-releases
      if: steps.inspect.outputs.patch-specified == 'true' && inputs.allow-prelease
      shell: sh
      run: |
        false

    - name: Create version string
      shell: sh
      id: select
      env:
        SELECTED_PYTHON_VERSION: ${{ inputs.allow-prerelease == 'true' && format('{0}.0-alpha - {0}.X', inputs.python-version) || inputs.python-version }}
      run: |
        echo "version-string=${SELECTED_PYTHON_VERSION}" | tee -a "${GITHUB_OUTPUT}"

    - name: Call upstream setup-python action
      uses: actions/setup-python@v5
      # Requires native m1 runner software, not x64 running via arch flags
      if: runner.arch != 'ARM64' && inputs.force-pyenv == 'false'
      with:
        python-version: ${{ steps.select.outputs.version-string }}
        architecture: ${{ inputs.architecture }}
        cache: ${{ inputs.cache }}
        token: ${{ inputs.token }}
        cache-dependency-path: ${{ inputs.cache-dependency-path }}

    - name: Setup Python on ARM64 (pyenv)
      if: runner.arch == 'ARM64' || inputs.force-pyenv != 'false'
      shell: sh
      run: |
        unset PYENV_ROOT

        if [ ! -d "$HOME/.pyenv" ]; then
          curl https://pyenv.run | bash
        fi
        
        export PATH="$HOME/.pyenv/bin:$PATH"
        echo "PATH=$HOME/.pyenv/bin:$PATH" >> $GITHUB_ENV
        
        export PYENV_ROOT="$HOME/.pyenv"
        echo "PYENV_ROOT=$HOME/.pyenv" >> $GITHUB_ENV
        
        # Ensure pyenv is up to date
        pyenv update
        
        FULL_PY_VERSION=$(pyenv install --list | grep "^  ${{ inputs.python-version }}" | grep -v 'dev' | tail -n 1)
        env PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install --skip-existing $FULL_PY_VERSION
        
        PY_PREFIX=$(pyenv prefix $FULL_PY_VERSION)
        echo "PATH=$PY_PREFIX/bin:$PATH" >> $GITHUB_ENV
