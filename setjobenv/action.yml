name: "⚙️ Set Job Environment"
description: "Sets usable env for all job steps based on payload in GitHub Event. To be ran immediately after 'actions/checkout' step."
runs:
  using: "composite"
  steps:
    - name: Check Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        if [[ $RUNNER_DEBUG = 1 ]]; then
          set -x
        fi
        packagesNeeded='curl jq gh'
        for cmd in $packagesNeeded; do
          if command -v "$cmd" >/dev/null 2>&1; then
            packagesNeeded=$(echo "$packagesNeeded" | sed "s/\b$cmd\b//g" | sed 's/^ *//;s/ *$//' | tr -s ' ')
          fi
        done
        if [ -n "$packagesNeeded" ]; then
          SUDO=$(command -v sudo || echo "")
          if [ -x "$(command -v apk)" ]; then
              $SUDO apk add --no-cache $packagesNeeded
          elif [ -x "$(command -v apt-get)" ]; then
              type -p curl >/dev/null || $SUDO apt install curl -y
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
              $SUDO dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
              $SUDO chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | \
              $SUDO tee /etc/apt/sources.list.d/github-cli.list > /dev/null
              $SUDO apt update
              $SUDO apt-get install -y $packagesNeeded
          elif [ -x "$(command -v dnf)" ]; then
              $SUDO dnf install 'dnf-command(config-manager)'
              $SUDO dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
              $SUDO dnf install -y $packagesNeeded
          elif [ -x "$(command -v yum)" ]; then
              $SUDO yum install -y yum-utils
              $SUDO yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
              $SUDO yum install -y $packagesNeeded
          elif [ -x "$(command -v zypper)" ]; then
              $SUDO zypper addrepo https://cli.github.com/packages/rpm/gh-cli.repo
              $SUDO zypper ref
              $SUDO zypper install -n $packagesNeeded
          elif [ -x "$(command -v pacman)" ]; then
              $SUDO pacman -S --needed --noconfirm $packagesNeeded
          else
              echo "FAILED TO INSTALL required packages: $packagesNeeded" >&2
          fi
        fi
      shell: bash
    - name: Check Dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        if [[ $RUNNER_DEBUG = 1 ]]; then
          set -x
        fi
        packagesNeeded='curl jq gh'
        for cmd in $packagesNeeded; do
          if command -v "$cmd" >/dev/null 2>&1; then
            packagesNeeded=$(echo "$packagesNeeded" | sed "s/\b$cmd\b//g" | tr -s ' ')
          fi
        done
        if [ -x "$(command -v brew)" ]; then
            brew install $packagesNeeded
        else
            echo "FAILED TO INSTALL required packages: $packagesNeeded" >&2
        fi
      shell: bash
    - name: Check Dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        $env:packagesNeeded='curl,jq,gh'
        $packages = $env:packagesNeeded.Split(',')
        $missingPackages = @()
        foreach ($package in $packages) {
          if (-not (Get-Command -Name $package -ErrorAction SilentlyContinue)) {
            $missingPackages += $package
          }
        }
        if ($missingPackages.Count -gt 0) {
          foreach ($package in $missingPackages) {
            choco install -y $package
          }
        }
      shell: powershell
    - name: Identify Runner Hardware (Linux)
      if: |
        (runner.os == 'Linux' && runner.arch == 'X86') ||
        (runner.os == 'Linux' && runner.arch == 'X64')
      shell: bash
      run: |
        if [[ $RUNNER_DEBUG = 1 ]]; then
          free -h
          echo "――――――――――――――――――――――"
          lscpu
          echo "――――――――――――――――――――――"
        fi
        CPU_MODEL=$(lscpu | grep '^Model name:' | awk -F: '{print $2}' | xargs)
        echo "Set CPU_MODEL=$CPU_MODEL"
        echo "CPU_MODEL=$CPU_MODEL" >>"$GITHUB_ENV"
        CPU_CORES=$(lscpu | awk '/Core\(s\) per socket/ {print $4}')
        echo "Set CPU_CORES=$CPU_CORES"
        echo "CPU_CORES=$CPU_CORES" >>"$GITHUB_ENV"
        CPU_THREADS=$(lscpu | awk '/^CPU\(s\):/ {print $2}')
        echo "Set CPU_THREADS=$CPU_THREADS"
        echo "CPU_THREADS=$CPU_THREADS" >>"$GITHUB_ENV"
        MEM_TOTAL=$(grep 'MemTotal' /proc/meminfo | awk '{print $2/1024/1024 "GB"}')
        echo "Set MEM_TOTAL=$MEM_TOTAL"
        echo "MEM_TOTAL=$MEM_TOTAL" >>"$GITHUB_ENV"
    - name: Identify Runner Hardware (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        if [[ $RUNNER_DEBUG = 1 ]]; then
          sysctl -a
        fi
        CPU_MODEL=$(sysctl -n machdep.cpu.brand_string)
        echo "Set CPU_MODEL=$CPU_MODEL"
        echo "CPU_MODEL=$CPU_MODEL" >>"$GITHUB_ENV"
        CPU_CORES=$(sysctl -n hw.physicalcpu)
        echo "Set CPU_CORES=$CPU_CORES"
        echo "CPU_CORES=$CPU_CORES" >>"$GITHUB_ENV"
        CPU_THREADS=$(sysctl -n hw.logicalcpu)
        echo "Set CPU_THREADS=$CPU_THREADS"
        echo "CPU_THREADS=$CPU_THREADS" >>"$GITHUB_ENV"
        MEM_TOTAL=$(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 "GB"}')
        echo "Set MEM_TOTAL=$MEM_TOTAL"
        echo "MEM_TOTAL=$MEM_TOTAL" >>"$GITHUB_ENV"
    - name: Identify Runner Hardware (Windows)
      if: runner.os == 'Windows'
      run: |
        $CPU = Get-CimInstance -ClassName Win32_Processor
        $CPU_MODEL = $CPU.Name
        echo "Set CPU_MODEL=$CPU_MODEL"
        echo "CPU_MODEL=$CPU_MODEL" >>"$env:GITHUB_ENV"
        $CPU_CORES = $CPU.NumberOfCores
        echo "Set CPU_CORES=$CPU_CORES"
        echo "CPU_CORES=$CPU_CORES" >>"$env:GITHUB_ENV"
        $CPU_THREADS = $CPU.NumberOfLogicalProcessors
        echo "Set CPU_THREADS=$CPU_THREADS"
        echo "CPU_THREADS=$CPU_THREADS" >>"$env:GITHUB_ENV"
        $MEM = Get-CimInstance -ClassName Win32_PhysicalMemory
        $MEM_TOTAL = $MEM.Capacity
        $MEM_TOTAL = "$([int64]($MEM.Capacity | Measure-Object -Sum).Sum / 1GB)GB"
        echo "Set MEM_TOTAL=$MEM_TOTAL"
        echo "MEM_TOTAL=$MEM_TOTAL" >>"$env:GITHUB_ENV"
      shell: powershell
    - name: Catch Payload
      if:  runner.debug == '1'
      shell: bash
      run: |
        jq '.' "$GITHUB_EVENT_PATH"
    - name: Set & Print ENV
      run: |
        echo "GitHub native job envs:"
        echo "――――――――――――――――――――――"
        echo "CI=$CI"
        echo "GITHUB_ACTION=$GITHUB_ACTION"
        echo "GITHUB_ACTION_PATH=$GITHUB_ACTION_PATH"
        echo "GITHUB_ACTION_REPOSITORY=$GITHUB_ACTION_REPOSITORY"
        echo "GITHUB_ACTIONS=$GITHUB_ACTIONS"
        echo "GITHUB_ACTOR=$GITHUB_ACTOR"
        echo "GITHUB_API_URL=$GITHUB_API_URL"
        echo "GITHUB_BASE_REF=$GITHUB_BASE_REF"
        echo "GITHUB_ENV=$GITHUB_ENV"
        echo "GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME"
        echo "GITHUB_EVENT_PATH=$GITHUB_EVENT_PATH"
        echo "GITHUB_GRAPHQL_URL=$GITHUB_GRAPHQL_URL"
        echo "GITHUB_HEAD_REF=$GITHUB_HEAD_REF"
        echo "GITHUB_JOB=$GITHUB_JOB"
        echo "GITHUB_PATH=$GITHUB_PATH"
        echo "GITHUB_REF=$GITHUB_REF"
        echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"
        echo "GITHUB_REF_PROTECTED=$GITHUB_REF_PROTECTED"
        echo "GITHUB_REF_TYPE=$GITHUB_REF_TYPE"
        echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
        echo "GITHUB_REPOSITORY_OWNER=$GITHUB_REPOSITORY_OWNER"
        echo "GITHUB_RETENTION_DAYS=$GITHUB_RETENTION_DAYS"
        echo "GITHUB_RUN_ATTEMPT=$GITHUB_RUN_ATTEMPT"
        echo "GITHUB_RUN_ID=$GITHUB_RUN_ID"
        echo "GITHUB_RUN_NUMBER=$GITHUB_RUN_NUMBER"
        echo "GITHUB_SERVER_URL=$GITHUB_SERVER_URL"
        echo "GITHUB_SHA=$GITHUB_SHA"
        echo "GITHUB_STEP_SUMMARY=$GITHUB_STEP_SUMMARY"
        echo "GITHUB_WORKFLOW=$GITHUB_WORKFLOW"
        echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
        echo "RUNNER_ARCH=$RUNNER_ARCH"
        echo "RUNNER_DEBUG=$RUNNER_DEBUG"
        echo "RUNNER_NAME=$RUNNER_NAME"
        echo "RUNNER_OS=$RUNNER_OS"
        echo "RUNNER_TEMP=$RUNNER_TEMP"
        echo "RUNNER_TOOL_CACHE=$RUNNER_TOOL_CACHE"
        echo "――――――――――――――――――――――"
        echo "Setting env for steps:"
        echo "――――――――――――――――――――――"

        # These are needed first for some of the functions and conditionals within this action
        REPO=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f2)
        # LANGUAGE=$(gh api repos/"$GITHUB_REPOSITORY" --jq '.language')
        RFC_REPO=$(echo "$REPO" | sed 's/\./-/g; s/_/-/g')
        GIT_SHORT_HASH=$(echo "${GITHUB_SHA}" | cut -c1-8)
        GH_EVENT_ACTION=${{ github.event.action }}

        # Pre-Release/Release logic
        if [ "$GITHUB_EVENT_NAME" == 'release' ] && [ "$GH_EVENT_ACTION" == 'published' ]; then
            RELEASE=true
            PRE_RELEASE=$(jq -r '.release.prerelease' "$GITHUB_EVENT_PATH")
            RELEASE_TAG=$(jq -r '.release.tag_name' "$GITHUB_EVENT_PATH")
            {
              echo "RELEASE=$RELEASE"
              echo "PRE_RELEASE=$PRE_RELEASE"
              echo "RELEASE_TAG=$RELEASE_TAG"
            } >> "$GITHUB_ENV"
            if [ "$PRE_RELEASE" = false ]; then
                echo "FULL_RELEASE=true" >>"$GITHUB_ENV"
            else
                echo "FULL_RELEASE=false" >>"$GITHUB_ENV"
            fi
          echo "Set RELEASE=$RELEASE"
          echo "Set PRE_RELEASE=$PRE_RELEASE"
          echo "Set RELEASE_TAG=$RELEASE_TAG"
          echo "Set FULL_RELEASE=$FULL_RELEASE"
        fi

        # Begin custom
        echo "GH_EVENT_ACTION=$GH_EVENT_ACTION" >>GITHUB_ENV
        echo "Set GH_EVENT_ACTION=$GH_EVENT_ACTION"
        # echo "LANGUAGE=$LANGUAGE" >>"$GITHUB_ENV"
        # echo "Set LANGUAGE=$LANGUAGE"
        echo "GH_WORKFLOW_URL="$GITHUB_SERVER_URL"/"$GITHUB_REPOSITORY"/actions/runs/"$GITHUB_RUN_ID"" >>"$GITHUB_ENV"
        echo "Set GH_WORKFLOW_URL=$GH_WORKFLOW_URL"
        # RFC_REPO: the repo name represented in a RFC1035 format
        # which is useful if you want the repo name = a valid k8s namespace/service/deployment etc.
        echo "RFC_REPO=$RFC_REPO" >>"$GITHUB_ENV"
        echo "Set RFC_REPO=$RFC_REPO"
        echo "GIT_SHORT_HASH=$GIT_SHORT_HASH" >>"$GITHUB_ENV"
        echo "Set GIT_SHORT_HASH=$GIT_SHORT_HASH"
        # GPR_PROJECT: Use if you want to publish artifacts to GitHub Package Repository
        export GPR_PROJECT=ghcr.io/$GITHUB_REPOSITORY_OWNER/$REPO
        echo "GPR_PROJECT=$GPR_PROJECT" >>"$GITHUB_ENV"
        echo "Set GPR_PROJECT=$GPR_PROJECT"
        export REVISION=${GITHUB_REF##*/}
        echo "REVISION=$REVISION" >>"$GITHUB_ENV"
        echo "Set REVISION=$REVISION"
        # ADD YOUR OWN ENVS BELOW
        #
        echo "――――――――――――――――――――――"
        echo "Complete"
      shell: bash
