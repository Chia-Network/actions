name: "Vault K8S Login"
description: "Gets a certificate pair to log in to k8s from vault"
inputs:
  vault_url:
    description: "Full URL including port to vault"
    required: true
  vault_token:
    description: "Token for accessing vault"
    required: true
  backend_name:
    required: false
    description: "The name of the PKI endpoint that issues certificates for the cluster"
  role_name:
    description: "The role name in vault that will sign the generated keypair"
    required: true
  cluster_url:
    description: "URL or IP with port of the kubernetes api server"
    required: true
  ttl:
    description: "Duration of the token (subject to Vault configured limits)"
    default: "3600s"
    required: false
runs:
  using: "composite"
  steps:
    - name: Ensure dependencies are present
      run: |
        ( command -v apk && apk add jq curl curl-dev ) || true
        ( command -v apt-get && apt-get update && apt-get install -y jq curl ) || true
      shell: sh
    - name: Get certificate
      run: |
        temp_file=$(mktemp)
        http_status=$(curl -s \
          --header "X-Vault-Token: ${{ inputs.vault_token }}" \
          --request POST \
          -o ${temp_file} \
          -w "%{http_code}" \
          --data "{\"ttl\":\"${{ inputs.ttl }}\",\"common_name\":\"${{ github.actor }}@github\"}" \
          ${{ inputs.vault_url }}/v1/${{ inputs.backend_name }}/issue/${{ inputs.role_name }})

        DATA=$(cat ${temp_file})
        rm -f ${temp_file}

        if [ $http_status -ge 200 ] && [ $http_status -le 299 ]; then
          # Write the key data to a temp file
          CERT_FILE=$(mktemp)
          KEY_FILE=$(mktemp)
          printf '%s' "$DATA" | jq -r '.data.certificate' > $CERT_FILE
          printf '%s' "$DATA" | jq -r '.data.private_key' > $KEY_FILE

          # Generate a kubeconfig with the provided data
          kubectl config set-cluster 'cluster' --server=${{ inputs.cluster_url }}
          kubectl config set clusters.cluster.certificate-authority-data "$(printf '%s' "$DATA" | jq -r '.data.issuing_ca' | base64)"
          kubectl config set-credentials 'cluster-user' --embed-certs=true --client-certificate="$CERT_FILE" --client-key="$KEY_FILE"
          kubectl config set-context 'cluster' --cluster=cluster --user=cluster-user
          kubectl config use-context 'cluster'

          rm -f $CERT_FILE || true
          rm -f $KEY_FILE || true
        else
          echo "Error: HTTP Status Code return ${http_status}"
          exit 1
        fi
      shell: sh
